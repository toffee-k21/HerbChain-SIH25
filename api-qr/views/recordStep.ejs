<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Record Step for <%= batchId %></title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/ethers@6.5.0/dist/ethers.umd.min.js"></script>
  <script src="https://unpkg.com/@walletconnect/ethereum-provider/dist/umd/index.min.js"></script>
</head>
<body class="min-h-screen flex items-center justify-center bg-gradient-to-b from-white to-green-200">

  <div class="bg-white shadow-2xl rounded-2xl p-8 w-full max-w-lg">
    <!-- Title -->
    <h1 class="text-2xl font-bold text-green-700 text-center mb-6">
      Record Step
    </h1>
    <p class="text-center text-sm text-gray-600 mb-6">
      Batch ID: <span class="font-mono text-gray-800"><%= batchId %></span>
    </p>

    <!-- Form -->
    <form id="stepForm" class="space-y-4">
      <!-- Step Type -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Step Type</label>
        <select id="stepType" class="w-full border-gray-300 rounded-sm shadow-sm focus:ring-green-500 focus:border-green-500">
          <option value="0">Collection</option>
          <option value="1">Processing</option>
          <option value="2">Testing</option>
          <option value="3">Shipment</option>
          <option value="4">Retail</option>
        </select>
      </div>

      <!-- Actor ID -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Actor ID</label>
        <input type="text" id="actorId" required class="w-full border-gray-300 rounded-sm shadow-sm focus:ring-green-500 focus:border-green-500">
      </div>

      <!-- Quality -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Quality</label>
        <input type="text" id="quality" placeholder=" e.g., 8/10" class="w-full border-gray-300 rounded-sm shadow-sm focus:ring-green-500 focus:border-green-500">
      </div>

      <!-- Location -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Location</label>
        <input type="text" id="location" placeholder=" lat,long" class="w-full border-gray-300 rounded-sm shadow-sm focus:ring-green-500 focus:border-green-500">
      </div>

      <!-- Action -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Action</label>
        <input type="text" id="action" required class="w-full border-gray-300 rounded-sm shadow-sm focus:ring-green-500 focus:border-green-500">
      </div>

      <!-- Details -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Details (JSON)</label>
        <textarea id="details" rows="3" placeholder=' {"key":"value"}' class="w-full border-gray-300 rounded-sm shadow-sm focus:ring-green-500 focus:border-green-500 font-mono"></textarea>
      </div>

      <!-- Submit -->
      <div class="pt-4">
        <button type="submit" class="w-full bg-green-600 text-white py-2 px-4 rounded-lg shadow hover:bg-green-700 transition">
          Record Step
        </button>
      </div>
    </form>

    <!-- Status -->
    <p id="status" class="text-center mt-4 text-sm text-gray-700"></p>
  </div>

  <script>
    const batchId = "<%= batchId %>";
    const contractAddress = "0x275a703827ee97750b4dF88388880878a2cc5cdc"; // replace with your deployed contract
    const abi = [
      "function recordStep(string batchId,uint8 stepType,string actorId,string quality,string location,string action,string details) public"
    ];

    const statusEl = document.getElementById("status");
    const form = document.getElementById("stepForm");

    let wcProvider = null;

    async function connectWallet() {
      // ‚úÖ Desktop MetaMask
      if (window.ethereum) {
        await ethereum.request({ method: "eth_requestAccounts" });
        const provider = new ethers.BrowserProvider(window.ethereum);
        const signer = await provider.getSigner();
        return new ethers.Contract(contractAddress, abi, signer);
      }

      // ‚úÖ Mobile / WalletConnect v2
      if (!wcProvider) {
        wcProvider = await window.EthereumProvider.init({
          projectId: "29a699b060ba734c4986b31205e83da5", // your WalletConnect projectId
          chains: [11155111], // Sepolia
          showQrModal: true,
        });
      }

      await wcProvider.enable();
      const ethersProvider = new ethers.BrowserProvider(wcProvider);
      const signer = await ethersProvider.getSigner();
      return new ethers.Contract(contractAddress, abi, signer);
    }

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      try {
        statusEl.innerText = "‚è≥ Connecting wallet...";
        const contract = await connectWallet();

        const tx = await contract.recordStep(
          batchId,
          parseInt(document.getElementById("stepType").value),
          document.getElementById("actorId").value,
          document.getElementById("quality").value,
          document.getElementById("location").value,
          document.getElementById("action").value,
          document.getElementById("details").value
        );

        statusEl.innerText = "üöÄ Transaction sent: " + tx.hash;
        await tx.wait();
        statusEl.innerText = "‚úÖ Transaction confirmed: " + tx.hash;
      } catch (err) {
        console.error(err);
        statusEl.innerText = "‚ùå Error: " + (err.message || err);
      }
    });
  </script>
</body>
</html>
